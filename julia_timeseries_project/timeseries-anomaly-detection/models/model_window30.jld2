using CSV
using DataFrames
using Flux
using JLD2
using Statistics

# Step 1: Load and Prepare Data
data = CSV.File("path/to/anomaly-free.csv"; delim=';')
df = DataFrame(data)

# Create labels (assuming the first series is the normal one)
normal_series = df[!, Not(:datetime)]
anomaly_series = ... # Load or create your anomaly time series data

# Combine and create labels
X = vcat(normal_series, anomaly_series)
y = vcat(fill(0, size(normal_series, 1)), fill(1, size(anomaly_series, 1)))

# Split into training and testing sets
train_size = Int(0.8 * size(X, 1))
X_train, X_test = X[1:train_size, :], X[train_size+1:end, :]
y_train, y_test = y[1:train_size], y[train_size+1:end]

# Step 2: Define the Model
function create_model(input_size)
    model = Chain(
        Dense(input_size, 64, relu),
        Dense(64, 32, relu),
        Dense(32, 1, Ïƒ) # Sigmoid for binary classification
    )
    return model
end

# Step 3: Training Function
function train_model(X_train, y_train, window_size)
    model = create_model(window_size)
    opt = ADAMW(0.001, 0.001)

    for epoch in 1:100
        for i in 1:128:size(X_train, 1)
            x_batch = X_train[i:min(i+127, end), :]
            y_batch = y_train[i:min(i+127, end)]

            # Forward pass
            loss = Flux.Losses.binarycrossentropy(model(x_batch), y_batch)
            # Backward pass
            Flux.train!(loss, params(model), [(x_batch, y_batch)], opt)
        end
    end

    return model
end

# Train models with different window sizes
model_30 = train_model(X_train[1:30, :], y_train[1:30], 30)
model_90 = train_model(X_train[1:90, :], y_train[1:90], 90)
model_270 = train_model(X_train[1:270, :], y_train[1:270], 270)

# Step 4: Evaluate the Model
function evaluate_model(model, X_test, y_test)
    y_pred = model(X_test) .> 0.5
    return mean(y_pred .== y_test) # Balanced accuracy
end

bal_acc_30 = evaluate_model(model_30, X_test, y_test)
bal_acc_90 = evaluate_model(model_90, X_test, y_test)
bal_acc_270 = evaluate_model(model_270, X_test, y_test)

# Save the model
JLD2.@save "model_30.jld2" model_30
JLD2.@save "model_90.jld2" model_90
JLD2.@save "model_270.jld2" model_270

# Step 5: Testing Script
# test.jl
using JLD2
using Flux

# Load the model
JLD2.@load "model_30.jld2" trained_model

# Prepare test data (ensure it matches the training data format)
# ...

# Evaluate
bal_acc = evaluate_model(trained_model, test_x, test_y)
println("Balanced Accuracy: ", bal_acc)